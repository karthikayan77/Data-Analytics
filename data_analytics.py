# -*- coding: utf-8 -*-
"""Data Analytics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fVaTTc6F7XguqcNdMEEow4S6PyfQIX2o
"""

# Step 1: Install Required Libraries
!pip install -q matplotlib pandas scikit-learn tensorflow

# Step 2: Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Step 3: Generate Synthetic Hourly Energy Consumption Data (1 year)
np.random.seed(42)
date_rng = pd.date_range(start='1/1/2023', end='1/1/2024', freq='H')
consumption = 300 + 50 * np.sin(np.linspace(0, 3 * np.pi, len(date_rng))) + np.random.normal(0, 10, len(date_rng))
df = pd.DataFrame(data={'timestamp': date_rng, 'consumption': consumption})
df.set_index('timestamp', inplace=True)

# Step 4: Plot the data
df.plot(figsize=(12, 4), title="Synthetic Energy Consumption")
plt.ylabel("kWh")
plt.show()

# Step 5: Normalize data
scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(df)

# Step 6: Create dataset for LSTM
def create_dataset(data, time_steps=24):
    X, y = [], []
    for i in range(len(data) - time_steps):
        X.append(data[i:i+time_steps])
        y.append(data[i+time_steps])
    return np.array(X), np.array(y)

time_steps = 24  # use last 24 hours to predict the next hour
X, y = create_dataset(data_scaled, time_steps)

# Step 7: Train-test split
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Step 8: Build the LSTM model
model = Sequential([
    LSTM(64, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')

# Step 9: Train the model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.1, verbose=1)

# Step 10: Make predictions
y_pred = model.predict(X_test)

# Step 11: Inverse scale predictions
y_test_inv = scaler.inverse_transform(y_test.reshape(-1, 1))
y_pred_inv = scaler.inverse_transform(y_pred)

# Step 12: Plot actual vs predicted
plt.figure(figsize=(12, 5))
plt.plot(y_test_inv[:200], label='Actual')
plt.plot(y_pred_inv[:200], label='Predicted')
plt.title("Energy Consumption Forecast (First 200 Hours of Test Set)")
plt.legend()
plt.show()